{"version":3,"sources":["logo.svg","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","middle","thunk","logger","persistConfig","key","storage","stateReconciler","autoMergeLevel2","store","createStore","persistReducer","state","action","type","clicks","payload","autoClickers","isLoggedIn","applyMiddleware","persistor","persistStore","configureStore","App","props","i","this","window","setInterval","clickerAdd","setState","updateClicks","updateAutoClickers","className","onClick","autoClickerAdd","renderClickButton","renderAutoClickButton","renderClicks","Component","withRouter","connect","dispatch","update","updateAC","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","loading","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fdc5fcef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\n\r\nlet middle = [thunk, logger];\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage: storage,\r\n  stateReconciler: autoMergeLevel2\r\n};\r\n\r\nconst actions = (state, action) => {\r\n  switch (action.type) {\r\n    /*case \"example\":\r\n      return {\r\n        ...state,\r\n        exampleNewProp: action.payload\r\n      };\r\n    */\r\n\r\n    case \"updateClicks\":\r\n      return {\r\n        ...state,\r\n        clicks: action.payload\r\n      }\r\n    \r\n    case \"updateAC\":\r\n      return {\r\n        ...state,\r\n        autoClickers: action.payload\r\n      }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\n/*export const examplePropMethod = {\r\n  type: \"example\",\r\n  payload: true\r\n};\r\n*/\r\n\r\nexport const update = (clicks) => {\r\n  return {\r\n    type: \"updateClicks\",\r\n    payload: clicks\r\n  }\r\n}\r\n\r\nexport const updateAC = (autoClickers) => {\r\n  return {\r\n    type: \"updateAC\",\r\n    payload: autoClickers\r\n  }\r\n}\r\n\r\nconst configureStore = () => {\r\n  if (module.hot) {\r\n    module.hot.accept(actions, () => {\r\n      store.replaceReducer(actions);\r\n    });\r\n  }\r\n  return store ;\r\n};\r\n\r\nexport const store = createStore (\r\n  persistReducer(persistConfig, actions),\r\n  { isLoggedIn: false },\r\n  applyMiddleware(...middle)\r\n  );\r\nexport const persistor = persistStore(store);\r\n\r\nexport default configureStore;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { connect } from 'react-redux';\nimport { withRouter} from 'react-router-dom';\nimport { update, updateAC } from './store';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      clicks: this.props.clicks || 0,\n      autoClickers: this.props.autoClickers || 0\n    }\n  }\n\n  componentDidMount() {\n    for (var i=0; i <= this.state.autoClickers; i++) {\n      window.setInterval(() => this.clickerAdd(), 1000)\n    }\n  }\n\n  clickerAdd() {\n    this.setState({clicks: this.state.clicks + 1}, () => {\n      this.props.updateClicks(this.state.clicks)\n    })\n  }\n\n  autoClickerAdd() {\n    this.setState({autoClickers: this.state.autoClickers + 1}, () => {\n      this.props.updateAutoClickers(this.state.autoClickers)\n    })\n    window.setInterval(() => this.clickerAdd(), 1000)\n  }\n\n  renderClickButton() {\n    return (\n      <div className='clicker' onClick={() => this.clickerAdd()}>\n        Click for Clicks\n      </div>\n    )\n  }\n\n  renderAutoClickButton() {\n    return (\n      <div className='clicker' onClick={() => this.autoClickerAdd()}>\n        Auto Clicker\n      </div>\n    )\n  }\n\n  renderClicks() {\n    return (\n      <div>\n        <p className='clicks'>\n          Clicks: {this.state.clicks}\n        </p>\n        <p className='clicks'>\n          Clicks Per Second: {this.state.autoClickers}\n        </p>\n      </div>      \n    )\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"playSide\">\n          \n          {this.renderClickButton()}\n          {this.renderAutoClickButton()}\n        </div>\n        <div className=\"statSide\">\n          {this.renderClicks()}\n        </div>\n      </div>\n      );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ...state\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateClicks: (clicks) => {\n      dispatch(update(clicks))\n    },\n    updateAutoClickers: (autoClickers) => {\n      dispatch(updateAC(autoClickers))\n    }\n  }};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps) (App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from  'react-redux';\nimport './index.css';\nimport App from './App';\nimport configureStore from './store';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\nimport { persistor, store } from './store';\n\n/*  Frontend Structure:\n*   1. configureStore() => Create store (load previous store)\n*   2. render(App) =>\n*       2a. Set Provider as Store (use store info for frontend storage)\n*       2b. Use PersistGate to send user to LoginPage if not logged in, and keep user logged in after refresh \n*       2c. Use BrowserRouter and Component to render current page of the App\n*/\n\nconfigureStore();\n\nconst render = Component => {\n   return ReactDOM.render(\n    <Provider store={store}>\n      <PersistGate loading={''} persistor={persistor}>  \n       <BrowserRouter>\n         <Component />\n       </BrowserRouter>\n      </PersistGate>\n     </Provider>,\n     document.getElementById('root')\n   );\n };\n\nrender(App);\n\nif (module.hot) {\n   module.hot.accept('./App', () => {\n      const NextApp = require('./App').default;\n      render(NextApp);\n   });\n}\n\nserviceWorker.register();\n"],"sourceRoot":""}