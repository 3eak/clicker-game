{"version":3,"sources":["logo.svg","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","middle","thunk","logger","persistConfig","key","storage","stateReconciler","autoMergeLevel2","store","createStore","persistReducer","state","action","type","paper","payload","autoClickers","money","salePrice","applyMiddleware","persistor","persistStore","configureStore","App","props","selling","i","this","window","setInterval","clickerAdd","setState","setTimeout","sellPaper","updatePaper","updateAutoClickers","updateMoney","updateSalePrice","className","onClick","autoClickerAdd","increaseSalePrice","decreaseSalePrice","toFixed","renderClickButton","renderAutoClickButton","renderSaleButtons","renderPaper","Component","withRouter","connect","dispatch","updPaper","updAutoClickers","updMoney","price","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","loading","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e081f74c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\n\r\nlet middle = [thunk, logger];\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage: storage,\r\n  stateReconciler: autoMergeLevel2\r\n};\r\n\r\nconst actions = (state, action) => {\r\n  switch (action.type) {\r\n    /*case \"example\":\r\n      return {\r\n        ...state,\r\n        exampleNewProp: action.payload\r\n      };\r\n    */\r\n\r\n    case \"updatePaper\":\r\n      return {\r\n        ...state,\r\n        paper: action.payload\r\n      }\r\n    \r\n    case \"updateAutoClickers\":\r\n      return {\r\n        ...state,\r\n        autoClickers: action.payload\r\n      }\r\n\r\n    case \"updateMoney\":\r\n      return {\r\n        ...state,\r\n        money: action.payload\r\n      }\r\n\r\n    case \"updateSalePrice\":\r\n      return {\r\n        ...state,\r\n        salePrice: action.payload\r\n      }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\n/*export const examplePropMethod = {\r\n  type: \"example\",\r\n  payload: true\r\n};\r\n*/\r\n\r\nexport const updPaper = (paper) => {\r\n  return {\r\n    type: \"updatePaper\",\r\n    payload: paper\r\n  }\r\n}\r\n\r\nexport const updAutoClickers = (autoClickers) => {\r\n  return {\r\n    type: \"updateAutoClickers\",\r\n    payload: autoClickers\r\n  }\r\n}\r\n\r\nexport const updMoney = (money) => {\r\n  return {\r\n    type: \"updateMoney\",\r\n    payload: money\r\n  }\r\n}\r\n\r\nexport const updSalePrice= (salePrice) => {\r\n  return {\r\n    type: \"updateSalePrice\",\r\n    payload: salePrice\r\n  }\r\n}\r\n\r\nconst configureStore = () => {\r\n  if (module.hot) {\r\n    module.hot.accept(actions, () => {\r\n      store.replaceReducer(actions);\r\n    });\r\n  }\r\n  return store ;\r\n};\r\n\r\nexport const store = createStore (\r\n  persistReducer(persistConfig, actions),\r\n  {},\r\n  applyMiddleware(...middle)\r\n  );\r\nexport const persistor = persistStore(store);\r\n\r\nexport default configureStore;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.scss';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter} from 'react-router-dom';\r\nimport { updPaper, updAutoClickers, updMoney, updSalePrice } from './store';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      paper: this.props.paper || 0,\r\n      autoClickers: this.props.autoClickers || 0,\r\n      money: this.props.money || 0,\r\n      salePrice: this.props.salePrice || 1,\r\n      selling: false\r\n    }\r\n  }\r\n\r\n  /*\r\n  *   Run on App Load, check if any existing auto clickers saved and add an interval for every single one\r\n  *   Then start the infinite selling loop\r\n  */\r\n  componentDidMount() {\r\n    for (var i=0; i < this.state.autoClickers; i++) {\r\n      window.setInterval(() => this.clickerAdd(), 1000)\r\n    }\r\n    this.setState({selling: true})\r\n    window.setTimeout(() => this.sellPaper(), 1000 * this.state.salePrice)\r\n  }\r\n\r\n  // Add paper to the paper total\r\n  clickerAdd() {\r\n    this.setState({paper: this.state.paper + 1}, () => {\r\n      this.props.updatePaper(this.state.paper)\r\n    })\r\n    if (!this.state.selling) {\r\n      this.setState({selling: true})\r\n      window.setTimeout(() => this.sellPaper(), 1000 * this.state.salePrice)\r\n    }\r\n  }\r\n\r\n  // Add a new auto clicker\r\n  autoClickerAdd() {\r\n    this.setState({autoClickers: this.state.autoClickers + 1}, () => {\r\n      this.props.updateAutoClickers(this.state.autoClickers)\r\n    })\r\n    window.setInterval(() => this.clickerAdd(), 1000)\r\n  }\r\n\r\n  // Sell paper infinite loop on timeout\r\n  sellPaper() {\r\n    if (this.state.paper > 0) {\r\n      this.setState({paper: this.state.paper - 1, money: this.state.money + this.state.salePrice}, () => {\r\n        this.props.updateMoney(this.state.money)\r\n      })\r\n      window.setTimeout(() => this.sellPaper(), 1000 * this.state.salePrice)\r\n    } else {\r\n      this.setState({selling: false})\r\n    }\r\n  }\r\n\r\n  // Increase sale price\r\n  increaseSalePrice() {\r\n    this.setState({salePrice: this.state.salePrice + 0.01}, () => {\r\n      this.props.updateSalePrice(this.state.salePrice)\r\n    })\r\n  }\r\n\r\n  // Decrease Sale Price\r\n  decreaseSalePrice() {\r\n    if (this.state.salePrice > 0.01) {\r\n      this.setState({salePrice: this.state.salePrice - 0.01}, () => {\r\n        this.props.updateSalePrice(this.state.salePrice)\r\n      })\r\n    }\r\n  }\r\n\r\n  renderClickButton() {\r\n    return (\r\n      <div className='clicker' onClick={() => this.clickerAdd()}>\r\n        Make Paper\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderAutoClickButton() {\r\n    return (\r\n      <div className='clicker' onClick={() => this.autoClickerAdd()}>\r\n        Buy Auto Paper Maker\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderSaleButtons() {\r\n    return (\r\n      <div className='saleButtons'>\r\n        <div className='clicker' onClick={() => this.increaseSalePrice()}>\r\n          Increase Price\r\n        </div>\r\n        <div className='clicker' onClick={() => this.decreaseSalePrice()}>\r\n          Decrease Price\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderPaper() {\r\n    return (\r\n      <div>\r\n        <p className='clicks'>\r\n          Total Paper: {this.state.paper}\r\n        </p>\r\n        <p className='clicks'>\r\n          Money: £{this.state.money.toFixed(2)}\r\n        </p>\r\n        <p className='clicks'>\r\n          Selling Price: £{this.state.salePrice.toFixed(2)}\r\n        </p>\r\n        <p className='clicks'>\r\n          Paper Per Second: {this.state.autoClickers}\r\n        </p>\r\n      </div>      \r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"playSide\">\r\n          {this.renderClickButton()}\r\n          {this.renderAutoClickButton()}\r\n          {this.renderSaleButtons()}\r\n        </div>\r\n        <div className=\"statSide\">\r\n          {this.renderPaper()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ...state\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updatePaper: (paper) => {\r\n      dispatch(updPaper(paper))\r\n    },\r\n    updateAutoClickers: (autoClickers) => {\r\n      dispatch(updAutoClickers(autoClickers))\r\n    },\r\n    updateMoney: (money) => {\r\n      dispatch(updMoney(money))\r\n    },\r\n    updateSalePrice: (price) => {\r\n      dispatch(updSalePrice(price))\r\n    }\r\n  }};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps) (App));\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from  'react-redux';\nimport './index.css';\nimport App from './App';\nimport configureStore from './store';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\nimport { persistor, store } from './store';\n\n/*  Frontend Structure:\n*   1. configureStore() => Create store (load previous store)\n*   2. render(App) =>\n*       2a. Set Provider as Store (use store info for frontend storage)\n*       2b. Use PersistGate to send user to LoginPage if not logged in, and keep user logged in after refresh \n*       2c. Use BrowserRouter and Component to render current page of the App\n*/\n\nconfigureStore();\n\nconst render = Component => {\n   return ReactDOM.render(\n    <Provider store={store}>\n      <PersistGate loading={''} persistor={persistor}>  \n       <BrowserRouter>\n         <Component />\n       </BrowserRouter>\n      </PersistGate>\n     </Provider>,\n     document.getElementById('root')\n   );\n };\n\nrender(App);\n\nif (module.hot) {\n   module.hot.accept('./App', () => {\n      const NextApp = require('./App').default;\n      render(NextApp);\n   });\n}\n\nserviceWorker.register();\n"],"sourceRoot":""}